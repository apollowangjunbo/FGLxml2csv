import xml.etree.ElementTree as ET
import os
import sys
import xlwt

gjgpath = r'E:/GJG/trunk'
path = r"/src/GJGPlugin/Model/GJGNormPropInfoWriter.cpp"
commontag = '{http://www.bullseye.com/covxml}'
searchRes = []
wbk = xlwt.Workbook()
sheet = wbk.add_sheet('sheet 1')


def searchNode(node, tag, name):
    for child in node:
        if child.tag == commontag + tag and child.attrib['name'] == name:
            searchRes.append(child)
        searchNode(child, tag, name)


def traverseXml(node):
    fn_uncov = [c for c in node if c.tag == commontag + 'fn' and int(c.attrib['fn_cov']) < int(c.attrib['fn_total'])]
    cd_uncov_fn = [c for c in node if c.tag == commontag + 'fn'
                   and int(c.attrib['cd_cov']) < int(c.attrib['cd_total'])]
    # in [ 'decision','condition','switch-label','try','catch','for-range-body']]

    f = open('D:/res.csv', 'w')
    if len(fn_uncov) > 0:
        # sheet.write(0, 1, '函数覆盖率分析:')  # 第0行第一列写入内容
        f.write("函数覆盖率分析：\n")
        f.write("序号,路径,文件,函数,函数未覆盖数,条件未覆盖数,覆盖路径,备注\n")
        for i in range(len(fn_uncov)):
            f.write('%d,%s,%s,"%s",%d,%d,,%s' % (i + 1,
                                                 '../GJG' + os.path.split(path)[0],
                                                 os.path.split(path)[1],
                                                 fn_uncov[i].attrib['name'],
                                                 int(fn_uncov[i].attrib['fn_total']) - int(
                                                     fn_uncov[i].attrib['fn_cov']),
                                                 int(fn_uncov[i].attrib['cd_total']) - int(
                                                     fn_uncov[i].attrib['cd_cov']),
                                                 '\n'))
    if len(cd_uncov_fn) > 0:
        cpp = open(gjgpath + path)
        cpplines = cpp.readlines()
        f.write("条件覆盖率分析：\n")
        f.write("序号,路径,文件,函数,函数未覆盖数,条件未覆盖数,未覆盖条件序号,行数,语句,分析条件,覆盖路径,备注\n")
        index = 1
        for fn in cd_uncov_fn:
            child_index = 1
            for cd in fn:
                nLine =int(cd.attrib['line'])
                def write(condition,index,c_index):
                    line = []
                    def add(item,l=line):
                        s=str(item)
                        if '"' in s:
                            s.replace('"','""')
                        s = '"' + s + '"'
                        l += str(item)
                        l += ','

                    line.append(index)
                    line.append('../GJG' + os.path.split(path)[0])
                    line.append(os.path.split(path)[1])
                    line.append(fn.attrib['name'] if c_index==1  else '')
                    fn_total = int(fn.attrib['fn_total'])
                    fn_cov = int(fn.attrib['fn_cov'])
                    line.append(fn_total - fn_cov if c_index == 1 else '')
                    cd_total = int(fn.attrib['cd_total'])
                    cd_cov = int(fn.attrib['cd_cov'])
                    line.append(cd_total - cd_cov if c_index == 1 else '')
                    line.append(c_index)
                    line.append(nLine)
                    line.append(cpplines[nLine - 1].replace("\n", "").replace(" ", ""))
                    line.append(condition)
                    line.append('')
                    line.append('\n')
                    for item in line:
                        s=str(item)
                        if '"' in s:
                            s.replace('"','""')
                        if '\n' not in s:
                            s = '"' + s + '"'
                            f.write(s)
                            f.write(',')
                        else:
                            f.write(s)

                str_event = cd.attrib['event']
                if cd.attrib['kind'] in ['decision','condition']:
                    if str_event == 'full':
                        pass
                    if str_event in ['true','none']:
                        write('F',index, child_index)
                        child_index+=1
                        index += 1
                    if str_event in ['false','none']:
                        write('T', index,child_index)
                        child_index += 1
                        index += 1
                elif cd.attrib['kind'] not in ['function','constant'] and str_event != 'full'  :
                    write(cd.attrib['kind'],index, child_index)
                    child_index += 1
                    index += 1
        # wbk.save('test.xls')


def main():
    tree = ET.parse(r"C:\Users\wangjb-a\Desktop\E6迭代\覆盖率\01.xml")
    root = tree.getroot()
    searchNode(root, 'src', os.path.split(path)[1])
    print('find ' + str(len(searchRes)))
    # 搜索结果
    node = searchRes[0]  # 多个的时候来改序号
    print(node.attrib)
    fn_cov = int(node.attrib['fn_cov'])
    fn_total = int(node.attrib['fn_total'])
    print('函数覆盖率: %d/%d = %f 未覆盖: %d' % (fn_cov, fn_total, fn_cov / fn_total, fn_total - fn_cov))
    cd_cov = float(node.attrib['cd_cov'])
    cd_total = float(node.attrib['cd_total'])
    print('条件覆盖率: %d/%d = %f 未覆盖: %d' % (cd_cov, cd_total, cd_cov / cd_total, cd_total - cd_cov))
    traverseXml(node)


if __name__ == '__main__':
    main()
